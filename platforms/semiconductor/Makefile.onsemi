
GCC4MBED_TOOLPATH1 ?= $(TL_PATH)
GCC4MBED_TOOLPATH    := $(subst \,/,$(GCC4MBED_TOOLPATH1))
GCC     := $(call convert-slash,$(GCC4MBED_TOOLPATH)/arm-none-eabi-gcc)
GPP     := $(call convert-slash,$(GCC4MBED_TOOLPATH)/arm-none-eabi-g++)
AS      := $(call convert-slash,$(GCC4MBED_TOOLPATH)/arm-none-eabi-as)
AR      := $(call convert-slash,$(GCC4MBED_TOOLPATH)/arm-none-eabi-ar)
LD      := $(call convert-slash,$(GCC4MBED_TOOLPATH)/arm-none-eabi-g++)
OBJCOPY := $(call convert-slash,$(GCC4MBED_TOOLPATH)/arm-none-eabi-objcopy)
OBJDUMP := $(call convert-slash,$(GCC4MBED_TOOLPATH)/arm-none-eabi-objdump)
SIZE    := $(call convert-slash,$(GCC4MBED_TOOLPATH)/arm-none-eabi-size)

$(info "$(PROJECT)")
$(info "$(ACN_SDK_C_PATH)")

ACN_SDK_C_PATH := $(GCC4MBED_DIR)/acn-embedded/acn-sdk-c

INCLUDES += -I$(ACN_SDK_C_PATH)
INCLUDES += -I$(ACN_SDK_C_PATH)/include
INCLUDES += -I$(ACN_SDK_C_PATH)/src/wolfSSL
INCLUDES += -I$(ACN_SDK_C_PATH)/src/wolfSSL/wolfssl
INCLUDES += -I$(ACN_SDK_C_PATH)/platforms
INCLUDES += -I$(ACN_SDK_C_PATH)/platforms/semiconductor

INCDIRS += $(patsubst -I%,%,$(INCLUDES))

PLATFORM_FILES := $(ACN_SDK_C_PATH)/platforms/semiconductor

ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/ntp/*.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/bsd/*.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/time/*.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/arrow/*.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/arrow/api/device/*.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/http/*.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/json/*.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/ssl/*.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/wolfSSL/src/*.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/wolfSSL/wolfcrypt/src/aes.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/wolfSSL/wolfcrypt/src/asm.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/wolfSSL/wolfcrypt/src/asn.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/wolfSSL/wolfcrypt/src/ecc.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/wolfSSL/wolfcrypt/src/coding.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/wolfSSL/wolfcrypt/src/compress.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/wolfSSL/wolfcrypt/src/error.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/wolfSSL/wolfcrypt/src/fe_low_mem.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/wolfSSL/wolfcrypt/src/fe_operations.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/wolfSSL/wolfcrypt/src/ge_low_mem.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/wolfSSL/wolfcrypt/src/ge_operations.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/wolfSSL/wolfcrypt/src/hash.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/wolfSSL/wolfcrypt/src/hmac.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/wolfSSL/wolfcrypt/src/integer.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/wolfSSL/wolfcrypt/src/md5.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/wolfSSL/wolfcrypt/src/memory.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/wolfSSL/wolfcrypt/src/misc.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/wolfSSL/wolfcrypt/src/random.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/wolfSSL/wolfcrypt/src/sha.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/wolfSSL/wolfcrypt/src/rsa.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/wolfSSL/wolfcrypt/src/sha256.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/wolfSSL/wolfcrypt/src/signature.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/wolfSSL/wolfcrypt/src/wc_encrypt.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/wolfSSL/wolfcrypt/src/wc_port.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/wolfSSL/wolfcrypt/src/logging.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/mqtt/client/src/*.c)
ACN_SDK_C_SRC += $(wildcard $(ACN_SDK_C_PATH)/src/mqtt/packet/src/*.c)
ACN_SDK_C_SRC += $(wildcard $(PLATFORM_FILES)/time/*.c)
ACN_SDK_C_SRC += $(wildcard $(PLATFORM_FILES)/bsd/*.c)
ACN_SDK_C_SRC += $(wildcard $(PLATFORM_FILES)/arrow/*.c)
ACN_SDK_C_SRC += $(wildcard $(PLATFORM_FILES)/json/*.c)

MBED_DEVICE := NCS36510
OUTDIR := $(MBED_DEVICE)/acnsdkc
ACN_SDK_C_LIB := $(OUTDIR)/libacnsdkc.a

ACN_SDK_C_OBJ = $(ACN_SDK_C_SRC:.c=.o)

DEFINES += -D__semiconductor__
ACNSDK_DEF := -D__semiconductor__ -std=gnu11 -Os 
# -fno-inline-functions

ifneq (,$(findstring DDEBUG,$(DEFINES)))
ACNSDK_DEF += -DDEBUG
endif

# -Wmissing-prototypes -Wmissing-declarations -Wimplicit-function-declaration 
# -Werror -Wpedantic 
# -Wl,--wrap=calloc  
# -Wl,--wrap=free

#$(warning "$(PROJECT)")
#$(warning "$(LIB_DIR)")
$(info $(ACNSDK_DEF))

all: version $(ACN_SDK_C_LIB)

version:
	$(GPP) -v

$(ACN_SDK_C_LIB): $(ACN_SDK_C_OBJ)
	@echo Extracting $@
	$(Q) $(MKDIR) $(call convert-slash,$(dir $@)) $(QUIET)
	$(AR) -rcs $(ACN_SDK_C_LIB) $(ACN_SDK_C_OBJ)

.c.o:
	@echo c: $(GCC) $(C_FLAGS) $(ACNSDK_DEF) $(INCLUDES) -c $< -o $@
	@echo Compiling $<
	$(Q) $(MKDIR) $(call convert-slash,$(dir $@)) $(QUIET)
	$(Q) $(GCC) $(C_FLAGS) $(ACNSDK_DEF) $(INCLUDES) -c $< -o $@

#	$(GCC) $(C_FLAGS) $(INCLUDES) -c $< -o $@
clean:
	$(Q) $(REMOVE) $(call convert-slash,$(ACN_SDK_C_OBJ)) $(QUIET)
